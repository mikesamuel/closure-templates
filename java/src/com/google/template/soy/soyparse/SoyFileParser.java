/* SoyFileParser.java */
/* Generated By:JavaCC: Do not edit this line. SoyFileParser.java */
package com.google.template.soy.soyparse;

import com.google.common.annotations.VisibleForTesting;
import com.google.common.base.Preconditions;
import com.google.template.soy.base.SourceLocation;
import com.google.template.soy.base.SoySyntaxException;
import com.google.template.soy.base.internal.IdGenerator;
import com.google.template.soy.base.internal.SoyFileKind;
import com.google.template.soy.base.internal.SoyFileSupplier.Version;
import com.google.template.soy.error.ErrorReporter;
import com.google.template.soy.error.ErrorReporter.Checkpoint;
import com.google.template.soy.error.SoyError;
import com.google.template.soy.soytree.SoyFileNode;
import com.google.template.soy.soytree.NameAttributePair;
import com.google.template.soy.soytree.AliasDeclaration;
import com.google.template.soy.soytree.NamespaceDeclaration;
import com.google.template.soy.soytree.SoyNode.StandaloneNode;
import com.google.template.soy.soytree.TemplateBasicNodeBuilder;
import com.google.template.soy.soytree.TemplateDelegateNodeBuilder;
import com.google.template.soy.soytree.TemplateNode;
import com.google.template.soy.soytree.TemplateNodeBuilder;
import com.google.template.soy.soytree.TemplateNodeBuilder.DeclInfo;
import com.google.template.soy.soytree.TemplateNode.SoyFileHeaderInfo;
import com.google.template.soy.types.SoyTypeRegistry;

import java.io.*;
import java.util.*;
import java.util.regex.*;


/**
 * This parser's specification is in SoyFileParser.jj, which is read by JavaCC and transformed
 * into SoyFileParser.java. To modify this parser, please edit SoyFileParser.jj. Do not edit
 * SoyFileParser.java directly.
 *
 * <p> Important: Do not use outside of Soy code (treat as superpackage-private).
 *
 * <pre>
 * This parser parses the following Soy file structure:
 *
 * 1. Delegate package (delpackage):
 *    + Optional.
 *    + The file must contain 0 or 1 delpackage declaration.
 *    + It must appear before the namespace declaration.
 *    + It must appear on its own line and start at the start of a line.
 *    Example:  {delpackage MySecretFeature}
 *
 * 2. Namespace:
 *    + The file must contain exactly one namespace declaration.
 *    + It must appear before any templates.
 *    + It must appear on its own line and start at the start of a line.
 *    Examples:
 *    {namespace boo.foo}
 *    {namespace boo.foo autoescape="..."}
 *
 * 3. Alias:
 *    + Alias declarations must appear after the namespace declaration.
 *    + They must appear before any templates.
 *    + Each must appear on its own line and start at the start of a line.
 *    Examples:
 *    {alias boo.foo.goo.moo}
 *    {alias boo.foo.goo.moo as zoo}
 *
 * 4. SoyDoc:
 *    + Starts with slash-star-star (/**) and ends with star-slash (*&#47;) like JavaDoc.
 *    + SoyDoc must appear on its own line(s) and start at the start of a line.
 *    + Currently recognizes two tags: "&#64;param keyName" and "&#64;param? optionalKeyName".
 *    Example:
 *    /**
 *     * &#64;param boo Something scary.
 *     * &#64;param? goo Something slimy (optional).
 *     *&#47;
 *
 * 5. Template:
 *    + Each template must be immediately preceded by a SoyDoc block.
 *    + The 'template' tag and the '/template' tag much each appear on its own line(s) and start
 *      at the start of a line.
 *    + The template content is parsed by TemplateParser.jj.
 *    Examples:
 *    /**
 *     * New style.
 *     * &#64;param boo Something scary.
 *     * &#64;param? goo Something slimy (optional).
 *     *&#47;
 *    {template .foo autoescape="..."}
 *      {msg desc=""}
 *        {$boo} has a friend named {$goo.firstName}.
 *      {/msg}
 *    {/template}
 *
 * 6. Misc:
 *    + Other than the items specified above, everything else is ignored.
 *    + SoyDoc blocks not immediately followed by a template are ignored.
 *    + The file must end with a newline.
 * </pre>
 *
 * <p>TODO(lukes):  This parser has a lot of issues:
 * 1. This should be merged with the TemplateParser.  Currently this parser matches all template
 *    contents and passes them to TemplateParser.  This is probably not very performant (2 passes
 *    over each template body) and also neccesitates a lot of manual source location munging.
 * 2. Too much parsing logic is handled by the AST nodes with regular expressions.  This is probably
 *    slower than handling it in the parser and it leads to redundant error handling code.
 *
 */
public class SoyFileParser implements SoyFileParserConstants {


  /** Pattern for the line number in an error message generated by the parser or token manager. */
  private static final Pattern ERROR_MSG_LINE_NUM_PAT =
      Pattern.compile("(?<=line )\\d+(?=, column )");

  private static final SoyError UNCATEGORIZED = SoyError.of("In file {0}, template {1}: {2}");


  /** Type registry for resolving type names. */
  private SoyTypeRegistry typeRegistry;

  /** Node id generator for the tree being built. */
  private IdGenerator nodeIdGen;

  /** The kind of this Soy file. */
  private SoyFileKind soyFileKind;

  /** Path of source being parsed. This is descriptive, not a means to refetch source. */
  private String filePath;

  private ErrorReporter errorReporter;

  /**
   * Constructor that takes a reader object providing the input.
   * @param typeRegistry The type registry for resolving type names.
   * @param nodeIdGen The node id generator for the tree being built.
   * @param input The input to parse.
   * @param soyFileKind The kind of this Soy file.
   * @param filePath The path of the source being parsed. Used for reporting.
   * @param errorReporter For reporting parse errors.
   */
  public SoyFileParser(
      SoyTypeRegistry typeRegistry,
      IdGenerator nodeIdGen,
      Reader input,
      SoyFileKind soyFileKind,
      String filePath,
      ErrorReporter errorReporter) {
    this(input);
    Preconditions.checkNotNull(typeRegistry);
    Preconditions.checkNotNull(nodeIdGen);
    this.typeRegistry = typeRegistry;
    this.nodeIdGen = nodeIdGen;
    this.soyFileKind = soyFileKind;
    this.filePath = filePath;
    this.errorReporter = errorReporter;
  }

  /**
   * Attempts to parse the given input as a Soy file, returns null if parsing fails.
   */
  public SoyFileNode parseSoyFile() {
    Preconditions.checkNotNull(typeRegistry);
    Preconditions.checkNotNull(nodeIdGen);
    Checkpoint checkpoint = errorReporter.checkpoint();
    SoyFileNode soyFileNode = null;
    try {
      soyFileNode = SoyFile();
    } catch (ParseException e) {
      ParseErrors.reportSoyFileParseException(errorReporter, filePath, e);
    } catch (SoySyntaxException e) {
      ParseErrors.report(errorReporter, filePath, e);
    } catch (TokenMgrError e) {
      // This is only thrown by TemplateParser (and ExpressionParser) SoyFileParser never throws this
      ParseErrors.report(errorReporter, filePath, e);
    }
    // our callers expect us to return null when encountering parsing errors.
    if (errorReporter.errorsSince(checkpoint)) {
      return null;
    }
    return soyFileNode;
  }


  /**
   * Adjusts an error message generated by the template parser or template token manager so that the
   * line number is with respect to the Soy file instead of with respect to the template.
   * @param errorMsg Error message from a parser or token manager error.
   * @param templateTagLineNum The line number of the 'template' tag with respect to the Soy file.
   * @return The adjusted error message with the new line number, or the original error message if
   *     no line number is found in it.
   */
  @VisibleForTesting
  static String adjustLineNumInErrorMsg(String errorMsg, int templateTagLineNum) {

    Matcher matcher = ERROR_MSG_LINE_NUM_PAT.matcher(errorMsg);
    if (! matcher.find()) {
      // Can't find line number, so no adjustment.
      return errorMsg;
    }

    int newLineNum = templateTagLineNum + Integer.parseInt(matcher.group());
    return errorMsg.substring(0, matcher.start()) + newLineNum + errorMsg.substring(matcher.end());
  }

  private SourceLocation createSrcLoc(Token tok1, Token ...rest) {
    return Tokens.createSrcLoc(filePath, tok1, rest);
  }

  final private SoyFileNode SoyFile() throws ParseException {TemplateNode template;
  String delpackageName = null;
  NamespaceDeclaration namespace = NamespaceDeclaration.NULL;
  List<TemplateNode> templates = new ArrayList<TemplateNode>();
  List<AliasDeclaration> aliases = new ArrayList<AliasDeclaration>();
  AliasDeclaration alias = null;
  // note we generate the id first to avoid having to edit every test that asserts on node ids.
  int id = nodeIdGen.genId();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DELPACKAGE_OPEN:{
      delpackageName = DelPackage();
      break;
      }
    default:
      jj_la1[0] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NAMESPACE_OPEN:{
      namespace = Namespace();
      break;
      }
    default:
      jj_la1[1] = jj_gen;
      ;
    }
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ALIAS_OPEN:{
        ;
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        break label_1;
      }
      alias = Alias();
aliases.add(alias);
    }
SoyFileHeaderInfo soyFileHeaderInfo = new SoyFileHeaderInfo(delpackageName, namespace);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DELTEMPLATE_OPEN:
      case TEMPLATE_OPEN:{
        ;
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        break label_2;
      }
      template = Template(soyFileHeaderInfo);
templates.add(template);
    }
    jj_consume_token(0);
SoyFileNode sfn =
        new SoyFileNode(
            id,
            filePath,
            soyFileKind,
            errorReporter,
            delpackageName,
            namespace,
            aliases);
    sfn.addChildren(templates);
    {if ("" != null) return sfn;}
    throw new Error("Missing return statement in function");
  }

  final private AliasDeclaration Alias() throws ParseException {Token open, namespace, close;
  Token alias = null, as = null;
    open = jj_consume_token(ALIAS_OPEN);
    namespace = jj_consume_token(DOTTED_IDENT);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case AS:{
      as = jj_consume_token(AS);
      alias = jj_consume_token(DOTTED_IDENT);
      break;
      }
    default:
      jj_la1[4] = jj_gen;
      ;
    }
    close = jj_consume_token(RBRACE);
{if ("" != null) return alias == null
        ? new AliasDeclaration(
            namespace.image,
            errorReporter,
            createSrcLoc(open, namespace, close))
        : new AliasDeclaration(
            namespace.image,
            alias.image,
            errorReporter,
            createSrcLoc(open, namespace, as, alias, close));}
    throw new Error("Missing return statement in function");
  }

  final private NamespaceDeclaration Namespace() throws ParseException {Token open, name, close;
  NameAttributePair attr;
  List<NameAttributePair> attributes = new ArrayList<NameAttributePair>();
    open = jj_consume_token(NAMESPACE_OPEN);
    name = jj_consume_token(DOTTED_IDENT);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CSSBASE:
      case AUTOESCAPE:
      case REQUIRECSS:{
        ;
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        break label_3;
      }
      attr = Attribute();
attributes.add(attr);
    }
    close = jj_consume_token(RBRACE);
{if ("" != null) return new NamespaceDeclaration(name.image, attributes, errorReporter);}
    throw new Error("Missing return statement in function");
  }

  final private NameAttributePair Attribute() throws ParseException {Token name;
  Token eq;
  Token value;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case AUTOESCAPE:{
      name = jj_consume_token(AUTOESCAPE);
      break;
      }
    case REQUIRECSS:{
      name = jj_consume_token(REQUIRECSS);
      break;
      }
    case CSSBASE:{
      name = jj_consume_token(CSSBASE);
      break;
      }
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    eq = jj_consume_token(EQ);
    value = jj_consume_token(ATTRIBUTE_VALUE);
{if ("" != null) return new NameAttributePair(
        name.image,
        // trim quotes off the token
        value.image.substring(1, value.image.length() - 1),
        createSrcLoc(name, eq, value));}
    throw new Error("Missing return statement in function");
  }

  final private String DelPackage() throws ParseException {Token name;
    jj_consume_token(DELPACKAGE_OPEN);
    name = jj_consume_token(DOTTED_IDENT);
    jj_consume_token(RBRACE);
{if ("" != null) return name.image;}
    throw new Error("Missing return statement in function");
  }

  final private TemplateNode Template(SoyFileHeaderInfo soyFileHeaderInfo) throws ParseException {Token open, templateContent, close;
  boolean isBasicTemplate;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TEMPLATE_OPEN:{
      open = jj_consume_token(TEMPLATE_OPEN);
      templateContent = jj_consume_token(TEMPLATE_CONTENT);
isBasicTemplate = true;
      break;
      }
    case DELTEMPLATE_OPEN:{
      open = jj_consume_token(DELTEMPLATE_OPEN);
      templateContent = jj_consume_token(DELTEMPLATE_CONTENT);
isBasicTemplate = false;
      break;
      }
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
SourceLocation srcLocation = createSrcLoc(open, templateContent);

    TemplateNodeBuilder templateNodeBuilder = isBasicTemplate
        ? new TemplateBasicNodeBuilder(
            soyFileHeaderInfo, srcLocation, errorReporter, typeRegistry)
        : new TemplateDelegateNodeBuilder(
            soyFileHeaderInfo, srcLocation, errorReporter, typeRegistry);

    templateNodeBuilder.setId(nodeIdGen.genId());

    // --- Set the command text. ---
    // trim the leading tag name and the trailing '}'
    String cmdText =
        open.image.substring(isBasicTemplate ? 10 : 13, open.image.length() - 1);
    templateNodeBuilder.setCmdText(cmdText);

    // --- Set the SoyDoc. ---
    // special tokens are accessible from the non-special tokens that come after them.
    Token soyDoc = open.specialToken;
    if (soyDoc != null && soyDoc.kind == SOYDOC) {
      templateNodeBuilder.setSoyDoc(soyDoc.image);
    } else {
      templateNodeBuilder.setSoyDoc(null);
    }

    List<DeclInfo> templateHeaderDecls = null;
    List<StandaloneNode> templateBodyNodes = null;
    // trim the close template tag.
    String templateBodyContent =
        templateContent.image.substring(0, templateContent.image.lastIndexOf("{"));
    try {
      TemplateParseResult result = new TemplateParser(
            nodeIdGen,
            templateBodyContent,
            filePath,
            templateContent.beginLine,
            templateContent.beginColumn,
            errorReporter)
            .parseTemplateContent();
      templateHeaderDecls = result.getHeaderDecls();
      templateBodyNodes = result.getBodyNodes();
    } catch (TokenMgrError tme) {
      String adjustedErrorMsg = adjustLineNumInErrorMsg(tme.getMessage(), open.beginLine);
      errorReporter.report(
          SourceLocation.UNKNOWN,
          UNCATEGORIZED,
          filePath,
          templateNodeBuilder.getTemplateNameForUserMsgs(),
          adjustedErrorMsg);
    } catch (ParseException pe) {
      String adjustedErrorMsg = adjustLineNumInErrorMsg(pe.getMessage(), open.beginLine);
      errorReporter.report(
          SourceLocation.UNKNOWN,
          UNCATEGORIZED,
          filePath,
          templateNodeBuilder.getTemplateNameForUserMsgs(),
          adjustedErrorMsg);
    } catch (SoySyntaxException sse) {
      errorReporter.report(
          SourceLocation.UNKNOWN,
          UNCATEGORIZED,
          filePath,
          templateNodeBuilder.getTemplateNameForUserMsgs(),
          sse.getMessage());
    }
if (templateHeaderDecls != null) {
      templateNodeBuilder.setHeaderDecls(templateHeaderDecls);
    }
    TemplateNode templateNode = templateNodeBuilder.build();
    if (templateBodyNodes != null) {
        templateNode.addChildren(templateBodyNodes);
    }
    {if ("" != null) return templateNode;}
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public SoyFileParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[8];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x20000,0x4000,0x1000,0x1800000,0x800,0x1a000,0x1a000,0x1800000,};
   }

  /** Constructor with InputStream. */
  public SoyFileParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public SoyFileParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new SoyFileParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public SoyFileParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new SoyFileParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
      jj_input_stream = new SimpleCharStream(stream, 1, 1);
   } else {
      jj_input_stream.ReInit(stream, 1, 1);
   }
   if (token_source == null) {
      token_source = new SoyFileParserTokenManager(jj_input_stream);
   }

    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public SoyFileParser(SoyFileParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(SoyFileParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[32];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 8; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 32; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
